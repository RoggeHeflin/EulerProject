using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Euler.Functions
{
	/// <summary>
	/// The sequence of triangle numbers is generated by adding the natural numbers.
	/// 
	/// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
	/// 
	/// The first ten terms would be:
	///		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	///		
	///	Let us list the factors of the first seven triangle numbers:
	///		 1: 1
	///		 3: 1,3
	///		 6: 1,2,3,6
	///		10: 1,2,5,10
	///		15: 1,3,5,15
	///		21: 1,3,7,21
	///		28: 1,2,4,7,14,28
	///		
	///	We can see that 28 is the first triangle number to have over five divisors.
	///	
	///	What is the value of the first triangle number to have over five hundred divisors?
	///	
	/// 76576500
	/// </summary>
	public class p0012
	{
		public static long Step_Brute()
		{
			int i = 1;
			int tri = 0;

			while (NumberOfDivisors_Brute(tri) <= 501)
			{
				tri = Common.SumToN(i);
				i++;
			}

			return tri;
		}
		
		static int NumberOfDivisors_Brute(int n)
		{
			int divCount = 0;

			for (int d = 1; d <= n / 2; d++)
			{
				if (n % d == 0)
				{
					divCount++;
				}
			}
			return divCount + 1;
		}

		public static int NumberOfDivisors(int n)
		{
			int divisors;
			int count;

			if (n % 2 == 0)
			{
				n = n / 2;

				divisors = 1;
				count = 0;

				while (n % 2 == 0)
				{
					count += 1;
					n = n / 2;
				}
				divisors = divisors * (count + 1);
			}
			else
			{
				divisors = 1;
				int p = 3;

				while (n != 1)
				{
					count = 0;
					while (n % p == 0)
					{
						count += 1;
						n = n / p;
					}

					divisors = divisors * (count + 1);
					p += 2;
				}
			}

			return divisors;
		}

		public static long Step_Math()
		{
			long n = 3;
			long Dn = 2;
			long cnt = 0;
			long n1;
			long Dn1;
			long exp;

			List<long> x = Common.Generate.Primes.Sieve.Upto(65500);

			while (cnt <= 500)
			{
				n = n + 1;
				n1 = n;

				if (n % 2 == 0) n1 = n1 / 2;

				Dn1 = 1;

				foreach (long i in x)
				{
					if (i * i > n1)
					{
						Dn1 = 2 * Dn1;
						break;
					}

					exp = 1;
					
					while (n1 % i == 0)
					{
						exp++;
						n1 = n1 / i;
					}

					if (exp > 1) Dn1 = Dn1 * exp;
					if (n == 1)	break;
				}

				cnt = Dn * Dn1;
				Dn = Dn1;
			}
			return n * (n - 1) / 2;
		}
	}
}